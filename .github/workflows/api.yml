name: Api

on:
  push:
    paths:
      - 'api/**'
      - 'buildSrc/**'
      - 'gradle/**'
      - '.github/workflows/api.yml'
      - 'docker/kubernetes/api/*.yaml'
    branches: [ master ]
    tags-ignore:
      - '*.*'
  pull_request:
    paths:
      - 'api/**'
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: Build for JDK ${{ matrix.java }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [ 19 ]

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: ${{ matrix.java }}

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build
        run: ./gradlew api:clean api:build

      - name: Run tests
        run: ./gradlew api:test

      - name: Run SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew api:sonarqube --info

  publish:
    name: Publish artifacts
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: build

    strategy:
      matrix:
        java: [ 19 ]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build and push image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: ./gradlew api:jib -Djib.to.image=winteryfox/artify-api -Djib.to.auth.username=${{ secrets.DOCKER_USERNAME }} -Djib.to.auth.password=${{ secrets.DOCKER_ACCESS_TOKEN }}

  deploy:
    name: Deploy to Kubernetes cluster
    runs-on: ubuntu-latest
    needs: publish

    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Kubernetes context
        uses: azure/aks-set-context@v3
        with:
          resource-group: artify
          cluster-name: artify

      - name: Deploy application
        uses: azure/k8s-deploy@v4
        with:
          manifests: ./docker/kubernetes/api
          action: deploy
          strategy: basic
          pull-images: false
